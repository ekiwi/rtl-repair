; this file was generated by our Bugfixer for:
; - decoder_3_to_8_wadden_buggy2.btor
; - complete_min_tb.csv
; it should be solvable with 8 changes, however, optimathsat changes 15 things
;
; solution from z3:
; (((= const_16 (_ bv126 8)) false))
; (((= const_15 (_ bv8 4)) true))
; (((= const_14 (_ bv125 8)) false))
; (((= const_13 (_ bv9 4)) true))
; (((= const_12 (_ bv123 8)) false))
; (((= const_11 (_ bv10 4)) true))
; (((= const_10 (_ bv119 8)) false))
; (((= const_9 (_ bv11 4)) true))
; (((= const_8 (_ bv111 8)) false))
; (((= const_7 (_ bv12 4)) true))
; (((= const_6 (_ bv95 8)) false))
; (((= const_5 (_ bv13 4)) true))
; (((= const_4 (_ bv63 8)) false))
; (((= const_3 (_ bv14 4)) true))
; (((= const_2 (_ bv127 8)) false))
; (((= const_1 (_ bv127 8)) true))
; (((= const_0 (_ bv15 4)) true))
; ((const_16 #xfe))
; ((const_15 #x8))
; ((const_14 #xfd))
; ((const_13 #x9))
; ((const_12 #xfb))
; ((const_11 #xa))
; ((const_10 #xf7))
; ((const_9 #xb))
; ((const_8 #xef))
; ((const_7 #xc))
; ((const_6 #xdf))
; ((const_5 #xd))
; ((const_4 #xbf))
; ((const_3 #xe))
; ((const_2 #xff))
; ((const_1 #x7f))
; ((const_0 #xf))


(set-logic BV)
; synthesis constants
(declare-fun const_16 () (_ BitVec 8))
(declare-fun const_15 () (_ BitVec 4))
(declare-fun const_14 () (_ BitVec 8))
(declare-fun const_13 () (_ BitVec 4))
(declare-fun const_12 () (_ BitVec 8))
(declare-fun const_11 () (_ BitVec 4))
(declare-fun const_10 () (_ BitVec 8))
(declare-fun const_9 () (_ BitVec 4))
(declare-fun const_8 () (_ BitVec 8))
(declare-fun const_7 () (_ BitVec 4))
(declare-fun const_6 () (_ BitVec 8))
(declare-fun const_5 () (_ BitVec 4))
(declare-fun const_4 () (_ BitVec 8))
(declare-fun const_3 () (_ BitVec 4))
(declare-fun const_2 () (_ BitVec 8))
(declare-fun const_1 () (_ BitVec 8))
(declare-fun const_0 () (_ BitVec 4))

; transition system encoding
(declare-sort decoder_3to8_s 0)
(declare-fun en_f (decoder_3to8_s) Bool)
(declare-fun C_f (decoder_3to8_s) Bool)
(declare-fun B_f (decoder_3to8_s) Bool)
(declare-fun A_f (decoder_3to8_s) Bool)
(define-fun s9_f ((state decoder_3to8_s)) (_ BitVec 2) (concat (ite (B_f state) (_ bv1 1) (_ bv0 1)) (ite (C_f state) (_ bv1 1) (_ bv0 1))))
(define-fun s11_f ((state decoder_3to8_s)) (_ BitVec 3) (concat (ite (A_f state) (_ bv1 1) (_ bv0 1)) (s9_f state)))
(define-fun s13_f ((state decoder_3to8_s)) (_ BitVec 4) (concat (ite (en_f state) (_ bv1 1) (_ bv0 1)) (s11_f state)))
(define-fun s15_f ((state decoder_3to8_s)) Bool (= (s13_f state) const_0))
(define-fun s16_f ((state decoder_3to8_s)) (_ BitVec 8) (ite (s15_f state) const_1 const_2))
(define-fun s19_f ((state decoder_3to8_s)) Bool (= (s13_f state) const_3))
(define-fun s20_f ((state decoder_3to8_s)) (_ BitVec 8) (ite (s19_f state) const_4 (s16_f state)))
(define-fun s23_f ((state decoder_3to8_s)) Bool (= (s13_f state) const_5))
(define-fun s24_f ((state decoder_3to8_s)) (_ BitVec 8) (ite (s23_f state) const_6 (s20_f state)))
(define-fun s27_f ((state decoder_3to8_s)) Bool (= (s13_f state) const_7))
(define-fun s28_f ((state decoder_3to8_s)) (_ BitVec 8) (ite (s27_f state) const_8 (s24_f state)))
(define-fun s31_f ((state decoder_3to8_s)) Bool (= (s13_f state) const_9))
(define-fun s32_f ((state decoder_3to8_s)) (_ BitVec 8) (ite (s31_f state) const_10 (s28_f state)))
(define-fun s35_f ((state decoder_3to8_s)) Bool (= (s13_f state) const_11))
(define-fun s36_f ((state decoder_3to8_s)) (_ BitVec 8) (ite (s35_f state) const_12 (s32_f state)))
(define-fun s39_f ((state decoder_3to8_s)) Bool (= (s13_f state) const_13))
(define-fun s40_f ((state decoder_3to8_s)) (_ BitVec 8) (ite (s39_f state) const_14 (s36_f state)))
(define-fun s43_f ((state decoder_3to8_s)) Bool (= (s13_f state) const_15))
(define-fun s44_f ((state decoder_3to8_s)) (_ BitVec 8) (ite (s43_f state) const_16 (s40_f state)))
(define-fun s45_f ((state decoder_3to8_s)) Bool (= ((_ extract 0 0) (s44_f state)) (_ bv1 1)))
(define-fun Y0_f ((state decoder_3to8_s)) Bool (s45_f state))
(define-fun s47_f ((state decoder_3to8_s)) Bool (= ((_ extract 1 1) (s44_f state)) (_ bv1 1)))
(define-fun Y1_f ((state decoder_3to8_s)) Bool (s47_f state))
(define-fun s49_f ((state decoder_3to8_s)) Bool (= ((_ extract 2 2) (s44_f state)) (_ bv1 1)))
(define-fun Y2_f ((state decoder_3to8_s)) Bool (s49_f state))
(define-fun s51_f ((state decoder_3to8_s)) Bool (= ((_ extract 3 3) (s44_f state)) (_ bv1 1)))
(define-fun Y3_f ((state decoder_3to8_s)) Bool (s51_f state))
(define-fun s53_f ((state decoder_3to8_s)) Bool (= ((_ extract 4 4) (s44_f state)) (_ bv1 1)))
(define-fun Y4_f ((state decoder_3to8_s)) Bool (s53_f state))
(define-fun s55_f ((state decoder_3to8_s)) Bool (= ((_ extract 5 5) (s44_f state)) (_ bv1 1)))
(define-fun Y5_f ((state decoder_3to8_s)) Bool (s55_f state))
(define-fun s57_f ((state decoder_3to8_s)) Bool (= ((_ extract 6 6) (s44_f state)) (_ bv1 1)))
(define-fun Y6_f ((state decoder_3to8_s)) Bool (s57_f state))
(define-fun s59_f ((state decoder_3to8_s)) Bool (= ((_ extract 7 7) (s44_f state)) (_ bv1 1)))
(define-fun Y7_f ((state decoder_3to8_s)) Bool (s59_f state))
(define-fun decoder_3to8_t ((state decoder_3to8_s) (state_n decoder_3to8_s)) Bool true)
(define-fun decoder_3to8_i ((state decoder_3to8_s)) Bool true)
(define-fun decoder_3to8_a ((state decoder_3to8_s)) Bool true)
(define-fun decoder_3to8_u ((state decoder_3to8_s)) Bool true)

; unrolling the transition system
(declare-fun s0 () decoder_3to8_s)
(assert (decoder_3to8_i s0))
(declare-fun s1 () decoder_3to8_s)
(assert (decoder_3to8_t s0 s1))
(declare-fun s2 () decoder_3to8_s)
(assert (decoder_3to8_t s1 s2))
(declare-fun s3 () decoder_3to8_s)
(assert (decoder_3to8_t s2 s3))
(declare-fun s4 () decoder_3to8_s)
(assert (decoder_3to8_t s3 s4))
(declare-fun s5 () decoder_3to8_s)
(assert (decoder_3to8_t s4 s5))
(declare-fun s6 () decoder_3to8_s)
(assert (decoder_3to8_t s5 s6))
(declare-fun s7 () decoder_3to8_s)
(assert (decoder_3to8_t s6 s7))
(declare-fun s8 () decoder_3to8_s)
(assert (decoder_3to8_t s7 s8))

; define inputs over time
(assert (and (C_f s8) (B_f s8) (A_f s8) (en_f s7) (not (C_f s7)) (B_f s7) (A_f s7) (en_f s6) (C_f s6) (not (B_f s6)) (A_f s6) (en_f s5) (not (C_f s5)) (not (B_f s5)) (A_f s5) (en_f s4) (C_f s4) (B_f s4) (not (A_f s4)) (en_f s3) (not (C_f s3)) (B_f s3) (not (A_f s3)) (en_f s2) (C_f s2) (not (B_f s2)) (not (A_f s2)) (en_f s1) (not (C_f s1)) (not (B_f s1)) (not (A_f s1)) (not (en_f s0)) (not (C_f s0)) (not (B_f s0)) (not (A_f s0)) (en_f s8)))

; expected outputs over time
(assert (and (Y1_f s8) (Y2_f s8) (Y3_f s8) (Y4_f s8) (Y5_f s8) (Y6_f s8) (not (Y7_f s8)) (Y0_f s7) (Y1_f s7) (Y2_f s7) (Y3_f s7) (Y4_f s7) (Y5_f s7) (not (Y6_f s7)) (Y7_f s7) (Y0_f s6) (Y1_f s6) (Y2_f s6) (Y3_f s6) (Y4_f s6) (not (Y5_f s6)) (Y6_f s6) (Y7_f s6) (Y0_f s5) (Y1_f s5) (Y2_f s5) (Y3_f s5) (not (Y4_f s5)) (Y5_f s5) (Y6_f s5) (Y7_f s5) (Y0_f s4) (Y1_f s4) (Y2_f s4) (not (Y3_f s4)) (Y4_f s4) (Y5_f s4) (Y6_f s4) (Y7_f s4) (Y0_f s3) (Y1_f s3) (not (Y2_f s3)) (Y3_f s3) (Y4_f s3) (Y5_f s3) (Y6_f s3) (Y7_f s3) (Y0_f s2) (not (Y1_f s2)) (Y2_f s2) (Y3_f s2) (Y4_f s2) (Y5_f s2) (Y6_f s2) (Y7_f s2) (not (Y0_f s1)) (Y1_f s1) (Y2_f s1) (Y3_f s1) (Y4_f s1) (Y5_f s1) (Y6_f s1) (Y7_f s1) (Y0_f s0) (Y1_f s0) (Y2_f s0) (Y3_f s0) (Y4_f s0) (Y5_f s0) (Y6_f s0) (Y7_f s0) (Y0_f s8)))

; soft constraint to change as few variables as possible
(assert-soft (= const_16 (_ bv126 8)) :weight 1)
(assert-soft (= const_15 (_ bv8 4)) :weight 1)
(assert-soft (= const_14 (_ bv125 8)) :weight 1)
(assert-soft (= const_13 (_ bv9 4)) :weight 1)
(assert-soft (= const_12 (_ bv123 8)) :weight 1)
(assert-soft (= const_11 (_ bv10 4)) :weight 1)
(assert-soft (= const_10 (_ bv119 8)) :weight 1)
(assert-soft (= const_9 (_ bv11 4)) :weight 1)
(assert-soft (= const_8 (_ bv111 8)) :weight 1)
(assert-soft (= const_7 (_ bv12 4)) :weight 1)
(assert-soft (= const_6 (_ bv95 8)) :weight 1)
(assert-soft (= const_5 (_ bv13 4)) :weight 1)
(assert-soft (= const_4 (_ bv63 8)) :weight 1)
(assert-soft (= const_3 (_ bv14 4)) :weight 1)
(assert-soft (= const_2 (_ bv127 8)) :weight 1)
(assert-soft (= const_1 (_ bv127 8)) :weight 1)
(assert-soft (= const_0 (_ bv15 4)) :weight 1)
; minimize I seems to do the trick here!
(minimize I)

(check-sat)



; check how many soft constraints hold
(get-value ((= const_16 (_ bv126 8))))
(get-value ((= const_15 (_ bv8 4))))
(get-value ((= const_14 (_ bv125 8))))
(get-value ((= const_13 (_ bv9 4))))
(get-value ((= const_12 (_ bv123 8))))
(get-value ((= const_11 (_ bv10 4))))
(get-value ((= const_10 (_ bv119 8))))
(get-value ((= const_9 (_ bv11 4))))
(get-value ((= const_8 (_ bv111 8))))
(get-value ((= const_7 (_ bv12 4))))
(get-value ((= const_6 (_ bv95 8))))
(get-value ((= const_5 (_ bv13 4))))
(get-value ((= const_4 (_ bv63 8))))
(get-value ((= const_3 (_ bv14 4))))
(get-value ((= const_2 (_ bv127 8))))
(get-value ((= const_1 (_ bv127 8))))
(get-value ((= const_0 (_ bv15 4))))

; retrieve solution
(get-value (const_16))
(get-value (const_15))
(get-value (const_14))
(get-value (const_13))
(get-value (const_12))
(get-value (const_11))
(get-value (const_10))
(get-value (const_9))
(get-value (const_8))
(get-value (const_7))
(get-value (const_6))
(get-value (const_5))
(get-value (const_4))
(get-value (const_3))
(get-value (const_2))
(get-value (const_1))
(get-value (const_0))

(exit)
