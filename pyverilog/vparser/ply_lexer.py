# ply_lexer.py. This file automatically created by PLY (version 3.11). Don't edit!
_tabversion   = '3.10'
_lextokens    = set(('ALWAYS', 'ALWAYS_COMB', 'ALWAYS_FF', 'ALWAYS_LATCH', 'AND', 'ASSIGN', 'AT', 'BEGIN', 'CASE', 'CASEX', 'CASEZ', 'COLON', 'COMMA', 'COND', 'DEFAULT', 'DELAY', 'DISABLE', 'DIVIDE', 'DOLLER', 'DOT', 'ELSE', 'END', 'ENDCASE', 'ENDFUNCTION', 'ENDGENERATE', 'ENDMODULE', 'ENDTASK', 'EQ', 'EQL', 'EQUALS', 'FLOATNUMBER', 'FOR', 'FOREVER', 'FORK', 'FUNCTION', 'GE', 'GENERATE', 'GENVAR', 'GT', 'ID', 'IF', 'INITIAL', 'INOUT', 'INPUT', 'INTEGER', 'INTNUMBER_BIN', 'INTNUMBER_DEC', 'INTNUMBER_HEX', 'INTNUMBER_OCT', 'JOIN', 'LAND', 'LBRACE', 'LBRACKET', 'LE', 'LNOT', 'LOCALPARAM', 'LOGIC', 'LOR', 'LPAREN', 'LSHIFT', 'LSHIFTA', 'LT', 'MINUS', 'MINUSCOLON', 'MOD', 'MODULE', 'NAND', 'NE', 'NEGEDGE', 'NEL', 'NOR', 'NOT', 'OR', 'OUTPUT', 'PARAMETER', 'PLUS', 'PLUSCOLON', 'POSEDGE', 'POWER', 'RBRACE', 'RBRACKET', 'REAL', 'REG', 'RPAREN', 'RSHIFT', 'RSHIFTA', 'SEMICOLON', 'SENS_OR', 'SIGNED', 'SIGNED_INTNUMBER_BIN', 'SIGNED_INTNUMBER_DEC', 'SIGNED_INTNUMBER_HEX', 'SIGNED_INTNUMBER_OCT', 'STRING_LITERAL', 'SUPPLY0', 'SUPPLY1', 'TASK', 'TIMES', 'TRI', 'UNIQUE', 'WAIT', 'WHILE', 'WIRE', 'XNOR', 'XOR'))
_lexreflags   = 64
_lexliterals  = ''
_lexstateinfo = {'INITIAL': 'inclusive'}
_lexstatere   = {'INITIAL': [('(?P<t_DIRECTIVE>\\`.*?\\n)|(?P<t_LINECOMMENT>//.*?\\n)|(?P<t_COMMENTOUT>/\\*(.|\\n)*?\\*/)|(?P<t_STRING_LITERAL>"([^"\\\\\\n]|(\\\\(([a-zA-Z\\\\?\'"])|([0-7]{1,3})|(x[0-9a-fA-F]+))))*")|(?P<t_FLOATNUMBER>((((([0-9]*\\.[0-9]+)|([0-9]+\\.))([eE][-+]?[0-9]+)?)|([0-9]+([eE][-+]?[0-9]+)))))|(?P<t_SIGNED_INTNUMBER_BIN>[0-9]*\'[sS][bB][0-1xZzZ?][0-1xXzZ?_]*)|(?P<t_INTNUMBER_BIN>[0-9]*\'[bB][0-1xXzZ?][0-1xXzZ?_]*)|(?P<t_SIGNED_INTNUMBER_OCT>[0-9]*\'[sS][oO][0-7xXzZ?][0-7xXzZ?_]*)|(?P<t_INTNUMBER_OCT>[0-9]*\'[oO][0-7xXzZ?][0-7xXzZ?_]*)|(?P<t_SIGNED_INTNUMBER_HEX>[0-9]*\'[sS][hH][0-9a-fA-FxXzZ?][0-9a-fA-FxXzZ?_]*)|(?P<t_INTNUMBER_HEX>[0-9]*\'[hH][0-9a-fA-FxXzZ?][0-9a-fA-FxXzZ?_]*)|(?P<t_SIGNED_INTNUMBER_DEC>[0-9]*\'[sS][dD][0-9xXzZ?][0-9xXzZ?_]*)|(?P<t_INTNUMBER_DEC>([0-9]*\'[dD][0-9xXzZ?][0-9xXzZ?_]*)|([0-9][0-9_]*))|(?P<t_ID>(([a-zA-Z_])([a-zA-Z_0-9$])*)|((\\\\\\S)(\\S)*))|(?P<t_NEWLINE>\\n+)|(?P<t_LOR>\\|\\|)|(?P<t_LAND>\\&\\&)|(?P<t_POWER>\\*\\*)|(?P<t_NOR>~\\|)|(?P<t_NAND>~\\&)|(?P<t_XNOR>~\\^)|(?P<t_LSHIFTA><<<)|(?P<t_RSHIFTA>>>>)|(?P<t_EQL>===)|(?P<t_NEL>!==)|(?P<t_PLUSCOLON>\\+:)|(?P<t_OR>\\|)|(?P<t_AND>\\&)|(?P<t_XOR>\\^)|(?P<t_LSHIFT><<)|(?P<t_RSHIFT>>>)|(?P<t_EQ>==)|(?P<t_NE>!=)|(?P<t_LE><=)|(?P<t_GE>>=)|(?P<t_PLUS>\\+)|(?P<t_TIMES>\\*)|(?P<t_COND>\\?)|(?P<t_MINUSCOLON>-:)|(?P<t_DOT>\\.)|(?P<t_LPAREN>\\()|(?P<t_RPAREN>\\))|(?P<t_LBRACKET>\\[)|(?P<t_RBRACKET>\\])|(?P<t_LBRACE>\\{)|(?P<t_RBRACE>\\})|(?P<t_DELAY>\\#)|(?P<t_DOLLER>\\$)|(?P<t_LNOT>!)|(?P<t_NOT>~)|(?P<t_LT><)|(?P<t_GT>>)|(?P<t_MINUS>-)|(?P<t_DIVIDE>/)|(?P<t_MOD>%)|(?P<t_EQUALS>=)|(?P<t_AT>@)|(?P<t_COMMA>,)|(?P<t_SEMICOLON>;)|(?P<t_COLON>:)', [None, ('t_DIRECTIVE', 'DIRECTIVE'), ('t_LINECOMMENT', 'LINECOMMENT'), ('t_COMMENTOUT', 'COMMENTOUT'), None, ('t_STRING_LITERAL', 'STRING_LITERAL'), None, None, None, None, None, None, ('t_FLOATNUMBER', 'FLOATNUMBER'), None, None, None, None, None, None, None, None, None, ('t_SIGNED_INTNUMBER_BIN', 'SIGNED_INTNUMBER_BIN'), ('t_INTNUMBER_BIN', 'INTNUMBER_BIN'), ('t_SIGNED_INTNUMBER_OCT', 'SIGNED_INTNUMBER_OCT'), ('t_INTNUMBER_OCT', 'INTNUMBER_OCT'), ('t_SIGNED_INTNUMBER_HEX', 'SIGNED_INTNUMBER_HEX'), ('t_INTNUMBER_HEX', 'INTNUMBER_HEX'), ('t_SIGNED_INTNUMBER_DEC', 'SIGNED_INTNUMBER_DEC'), ('t_INTNUMBER_DEC', 'INTNUMBER_DEC'), None, None, ('t_ID', 'ID'), None, None, None, None, None, None, ('t_NEWLINE', 'NEWLINE'), (None, 'LOR'), (None, 'LAND'), (None, 'POWER'), (None, 'NOR'), (None, 'NAND'), (None, 'XNOR'), (None, 'LSHIFTA'), (None, 'RSHIFTA'), (None, 'EQL'), (None, 'NEL'), (None, 'PLUSCOLON'), (None, 'OR'), (None, 'AND'), (None, 'XOR'), (None, 'LSHIFT'), (None, 'RSHIFT'), (None, 'EQ'), (None, 'NE'), (None, 'LE'), (None, 'GE'), (None, 'PLUS'), (None, 'TIMES'), (None, 'COND'), (None, 'MINUSCOLON'), (None, 'DOT'), (None, 'LPAREN'), (None, 'RPAREN'), (None, 'LBRACKET'), (None, 'RBRACKET'), (None, 'LBRACE'), (None, 'RBRACE'), (None, 'DELAY'), (None, 'DOLLER'), (None, 'LNOT'), (None, 'NOT'), (None, 'LT'), (None, 'GT'), (None, 'MINUS'), (None, 'DIVIDE'), (None, 'MOD'), (None, 'EQUALS'), (None, 'AT'), (None, 'COMMA'), (None, 'SEMICOLON'), (None, 'COLON')])]}
_lexstateignore = {'INITIAL': ' \t'}
_lexstateerrorf = {'INITIAL': 't_error'}
_lexstateeoff = {}
